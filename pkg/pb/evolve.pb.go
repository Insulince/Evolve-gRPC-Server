// Code generated by protoc-gen-go. DO NOT EDIT.
// source: evolve.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	evolve.proto

It has these top-level messages:
	Evolve
	EvolveRequest
	EvolveResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MODELS
type Evolve struct {
	A int64 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
}

func (m *Evolve) Reset()                    { *m = Evolve{} }
func (m *Evolve) String() string            { return proto.CompactTextString(m) }
func (*Evolve) ProtoMessage()               {}
func (*Evolve) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Evolve) GetA() int64 {
	if m != nil {
		return m.A
	}
	return 0
}

// REQUEST AND RESPONSE TYPES
type EvolveRequest struct {
	Evolve *Evolve `protobuf:"bytes,1,opt,name=evolve" json:"evolve,omitempty"`
}

func (m *EvolveRequest) Reset()                    { *m = EvolveRequest{} }
func (m *EvolveRequest) String() string            { return proto.CompactTextString(m) }
func (*EvolveRequest) ProtoMessage()               {}
func (*EvolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EvolveRequest) GetEvolve() *Evolve {
	if m != nil {
		return m.Evolve
	}
	return nil
}

type EvolveResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *EvolveResponse) Reset()                    { *m = EvolveResponse{} }
func (m *EvolveResponse) String() string            { return proto.CompactTextString(m) }
func (*EvolveResponse) ProtoMessage()               {}
func (*EvolveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EvolveResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Evolve)(nil), "evolve.Evolve")
	proto.RegisterType((*EvolveRequest)(nil), "evolve.EvolveRequest")
	proto.RegisterType((*EvolveResponse)(nil), "evolve.EvolveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EvolveService service

type EvolveServiceClient interface {
	Evolve(ctx context.Context, in *EvolveRequest, opts ...grpc.CallOption) (*EvolveResponse, error)
}

type evolveServiceClient struct {
	cc *grpc.ClientConn
}

func NewEvolveServiceClient(cc *grpc.ClientConn) EvolveServiceClient {
	return &evolveServiceClient{cc}
}

func (c *evolveServiceClient) Evolve(ctx context.Context, in *EvolveRequest, opts ...grpc.CallOption) (*EvolveResponse, error) {
	out := new(EvolveResponse)
	err := grpc.Invoke(ctx, "/evolve.EvolveService/Evolve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EvolveService service

type EvolveServiceServer interface {
	Evolve(context.Context, *EvolveRequest) (*EvolveResponse, error)
}

func RegisterEvolveServiceServer(s *grpc.Server, srv EvolveServiceServer) {
	s.RegisterService(&_EvolveService_serviceDesc, srv)
}

func _EvolveService_Evolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvolveServiceServer).Evolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evolve.EvolveService/Evolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvolveServiceServer).Evolve(ctx, req.(*EvolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EvolveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evolve.EvolveService",
	HandlerType: (*EvolveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Evolve",
			Handler:    _EvolveService_Evolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evolve.proto",
}

func init() { proto.RegisterFile("evolve.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2d, 0xcb, 0xcf,
	0x29, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xc4, 0xb8, 0xd8,
	0x5c, 0xc1, 0x2c, 0x21, 0x1e, 0x2e, 0xc6, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0xc6,
	0x44, 0x25, 0x73, 0x2e, 0x5e, 0x88, 0x78, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x1a,
	0x17, 0x54, 0x0b, 0x58, 0x0d, 0xb7, 0x11, 0x9f, 0x1e, 0xd4, 0x3c, 0xa8, 0x32, 0x98, 0x81, 0x5a,
	0x5c, 0x7c, 0x30, 0x8d, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa5,
	0xc9, 0xc9, 0xa9, 0xc5, 0xc5, 0x60, 0xad, 0x1c, 0x41, 0x30, 0xae, 0x91, 0x07, 0xcc, 0x92, 0xe0,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x73, 0xb8, 0x6b, 0x44, 0xd1, 0x8c, 0x87, 0xb8, 0x42,
	0x4a, 0x0c, 0x5d, 0x18, 0x62, 0x87, 0x13, 0x5b, 0x14, 0x8b, 0x9e, 0x7e, 0x41, 0x52, 0x12, 0x1b,
	0xd8, 0x77, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x2d, 0xde, 0xa4, 0xed, 0x00, 0x00,
	0x00,
}
